@using BoardGame.Utils;
<div class="board">
    <CascadingValue Value="this">
        @foreach (var space in Spaces) {
            <Space SpaceModel="space" />
        }
    </CascadingValue>

    <div class="panel">
        <img class="logo" src="/images/logo.png" />
        <QuizModal IsOpen="isModalOpen" IsOpenChanged="UpdateModalState" />
        <Dice MoveTokenEvent="MoveToken" />
    </div>
</div>

@code {
    public List<TokenModel> Tokens { get; set; } = new List<TokenModel>();
    public List<SpaceModel> Spaces { get; set; } = new List<SpaceModel>();

    private int order = 0;
    /// <summary>
    /// Token 순서
    /// </summary>
    private int Order {
        get {
            var currentOrder = order;

            if (order + 1 < Tokens.Count) order++;
            else order = 0;

            return currentOrder;
        }
    }

    protected override void OnInitialized() {
        // Tokens
        Tokens = Enumerable.Range(0, 4).Select(i => new TokenModel {
                Id = i,
                SpaceId = 0,
            }).ToList();

        foreach (var token in Tokens) {
            token.SpaceIdChanged += HandleTokenSpaceIdChanged;
        }

        // Spaces
        Random random = new Random();

        //1~47
        var Quizzes = Enumerable.Range(1, 47).Select(i => $"images/space-bg/{i}.png").ToList().Shuffle();

        //0~48 : 49개
        Spaces = Enumerable.Range(0, 49).Select(i => {
            var space = new SpaceModel {
                SpaceId = i,
                IsEventSpace = random.Next() % 4 == 0,
                QuizPath = !(i < 1 || i > 47) ? Quizzes[i - 1] : ""
            };

            return space;
        }).ToList();
    }

    /// <summary>
    /// Token의 위치가 변경되었을 때 발생된다.
    /// </summary>
    void HandleTokenSpaceIdChanged() {
        StateHasChanged();
    }

    /// <summary>
    /// 토큰의 위치를 이동시킨다.
    /// </summary>
    /// <param name="count">이동시킬 칸 수</param>
    async Task MoveToken(int count) {
        var order = Order;
        var token = Tokens.Find(t => t.Id == order) ?? throw new Exception();

        for (int i = 0; i < count; i++) {
            token.SpaceId++;
            await Task.Delay(500);
        }

        // 토큰이 도착했을 때 퀴즈모달을 띄우는 로직이 필요함.
        // 모달에는 퀴즈의 이미지 경로를 넘겨주고, 모달에서는 퀴즈 풀이 여부를 받아와야함.
        // Board가 너무 복잡해지니깐 Board에서 처리하는게 아니라 GameManagerService로 분리해야할 듯.
        var space = Spaces.Find(s => s.SpaceId == token.SpaceId);
        Console.WriteLine(space.QuizPath);
        //OpenModal(space.QuizPath);
    }


    private bool isModalOpen = false;

    private void OpenModal() {
        isModalOpen = true;
    }

    private void UpdateModalState(bool isOpen) {
        isModalOpen = isOpen;
    }
}